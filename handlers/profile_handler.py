from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

router = Router()


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ProfileState(StatesGroup):
    country = State()
    phone = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_profiles = {}


# –ö–æ–º–∞–Ω–¥–∞ /profile
@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    profile = user_profiles.get(user_id, {})
    country = profile.get("country", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    phone = profile.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")

    response = (f"\U0001F464 <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                f"üë§ <b>–ò–º—è:</b> {message.from_user.full_name}\n"
                f"üìõ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{message.from_user.username if message.from_user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üåç <b>–Ø–∑—ã–∫:</b> {message.from_user.language_code if message.from_user.language_code else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {country}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤—ã–±—Ä–∞–≤ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:")

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="profile:country")],
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="profile:phone")]
    ])

    photos = await message.bot.get_user_profile_photos(user_id)
    if photos.total_count > 0:
        photo = photos.photos[0][-1]
        await message.answer_photo(photo=photo.file_id, caption=response, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(response, parse_mode="HTML", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É"
@router.callback_query(lambda c: c.data == "profile:country")
async def change_country(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProfileState.country)
    await callback.message.answer("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
@router.message(ProfileState.country)
async def process_country(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_profiles.setdefault(user_id, {})["country"] = message.text.strip()
    await state.clear()
    await message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
@router.callback_query(lambda c: c.data == "profile:phone")
async def change_phone(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProfileState.phone)
    await callback.message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890):")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(ProfileState.phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_profiles.setdefault(user_id, {})["phone"] = message.text.strip()
    await state.clear()
    await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
