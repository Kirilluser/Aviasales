import logging
from datetime import datetime, timedelta, date
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from services.aviasales import search_flights
from services.db import store_search_history
from utils.get_city_iata_code import get_city_iata_code
from utils.calendar import generate_calendar

router = Router()

class FlightSearch(StatesGroup):
    departure_city = State()
    arrival_city = State()
    ticket_type = State()       # "fixed" –∏–ª–∏ "flexible"
    departure_date = State()    # –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    flexible_range = State()    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≥–∏–±–∫–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3)
    flexible_date = State()     # –±–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ –¥–ª—è –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return_choice = State()
    return_date = State()

@router.message(Command("find_ticket"))
async def search_flight_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")
    await state.set_state(FlightSearch.departure_city)

@router.message(StateFilter(FlightSearch.departure_city))
async def process_departure_city(message: types.Message, state: FSMContext):
    iata_code = get_city_iata_code(message.text)
    if not iata_code:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IATA-–∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(departure_city=iata_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–∞—Ä–∏–∂):")
    await state.set_state(FlightSearch.arrival_city)

@router.message(StateFilter(FlightSearch.arrival_city))
async def process_arrival_city(message: types.Message, state: FSMContext):
    iata_code = get_city_iata_code(message.text)
    if not iata_code:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IATA-–∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(arrival_city=iata_code)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –±–∏–ª–µ—Ç–∞: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –≥–∏–±–∫–∏–π
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", callback_data="ticket_type:fixed"),
            types.InlineKeyboardButton(text="–ì–∏–±–∫–∏–π", callback_data="ticket_type:flexible")
        ]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(FlightSearch.ticket_type)

@router.callback_query(lambda c: c.data and c.data.startswith("ticket_type:"), StateFilter(FlightSearch.ticket_type))
async def process_ticket_type(callback: types.CallbackQuery, state: FSMContext):
    ticket_type = callback.data.split(":")[1]
    await state.update_data(ticket_type=ticket_type)
    if ticket_type == "fixed":
        today = datetime.today().date()
        calendar_markup = generate_calendar(today.year, today.month)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã):", reply_markup=calendar_markup)
        await state.set_state(FlightSearch.departure_date)
    else:
        # –ì–∏–±–∫–∏–π —Ä–µ–∂–∏–º ‚Äì —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥–∏–±–∫–æ—Å—Ç–∏
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=str(n), callback_data=f"flexible:range:{n}") for n in range(1, 8)]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–∏–±–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π ¬±):", reply_markup=keyboard)
        await state.set_state(FlightSearch.flexible_range)
    await callback.answer()

# --- –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ ---
@router.callback_query(lambda c: c.data and c.data.startswith("CALENDAR:"), StateFilter(FlightSearch.departure_date))
async def process_fixed_departure_date(callback: types.CallbackQuery, state: FSMContext):
    selected_date_str = callback.data.split(":", 1)[1]  # —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    selected_date = datetime.strptime(selected_date_str, "%Y-%m-%d").date()
    today = datetime.today().date()
    if selected_date < today:
        await callback.message.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.")
        await callback.answer()
        return
    await state.update_data(departure_date=selected_date_str)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞: {selected_date_str}")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è", callback_data="add_return_date"),
            types.InlineKeyboardButton(text="–ë–∏–ª–µ—Ç –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü", callback_data="one_way")
        ]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(FlightSearch.return_choice)
    await callback.answer()

@router.callback_query(lambda c: c.data in ["add_return_date", "one_way"], StateFilter(FlightSearch.return_choice))
async def return_choice_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "add_return_date":
        await state.set_state(FlightSearch.return_date)
        today = datetime.today().date()
        calendar_markup = generate_calendar(today.year, today.month)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è (–Ω–µ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞):", reply_markup=calendar_markup)
    else:
        await state.update_data(return_date=None)
        await finalize_search(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("CALENDAR:"), StateFilter(FlightSearch.return_date))
async def process_return_date_callback(callback: types.CallbackQuery, state: FSMContext):
    selected_date_str = callback.data.split(":", 1)[1]
    selected_date = datetime.strptime(selected_date_str, "%Y-%m-%d").date()
    data = await state.get_data()
    departure_date_str = data.get("departure_date")
    if departure_date_str:
        departure_date = datetime.strptime(departure_date_str, "%Y-%m-%d").date()
        if selected_date < departure_date:
            await callback.message.answer("‚ùå –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞.")
            await callback.answer()
            return
    await state.update_data(return_date=selected_date_str)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: {selected_date_str}")
    await finalize_search(callback.message, state)
    await callback.answer()

# --- –ì–∏–±–∫–∏–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ ---
@router.callback_query(lambda c: c.data and c.data.startswith("flexible:range:"), StateFilter(FlightSearch.flexible_range))
async def process_flexible_range(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    flex_range = int(parts[2])
    await state.update_data(flexible_range=flex_range)
    today = datetime.today().date()
    calendar_markup = generate_calendar(today.year, today.month)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ (–±—É–¥—É—â—É—é –¥–∞—Ç—É):", reply_markup=calendar_markup)
    await state.set_state(FlightSearch.flexible_date)
    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("CALENDAR:"), StateFilter(FlightSearch.flexible_date))
async def process_flexible_date(callback: types.CallbackQuery, state: FSMContext):
    base_date_str = callback.data.split(":", 1)[1]
    base_date = datetime.strptime(base_date_str, "%Y-%m-%d").date()
    today = datetime.today().date()
    if base_date < today:
        await callback.message.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.")
        await callback.answer()
        return
    await state.update_data(flexible_date=base_date_str)
    data = await state.get_data()
    flex_range = data.get("flexible_range", 0)
    results = []
    # –ò—â–µ–º –±–∏–ª–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ base_date ¬± flex_range
    for delta in range(-flex_range, flex_range + 1):
        current_date = base_date + timedelta(days=delta)
        if current_date < today:
            continue
        date_str = current_date.isoformat()
        info = await search_flights(
            origin=data['departure_city'],
            destination=data['arrival_city'],
            departure_at=date_str,
            return_at=data.get('return_date')
        )
        if info:
            results.append(info)
    if results:
        response = "üî• <b>–ì–∏–±–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n" + "\n".join(results)
        await callback.message.answer(response, parse_mode="HTML")
    else:
        await callback.message.answer("‚ö† –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
    await state.clear()
    await callback.answer()

async def finalize_search(message: types.Message, state: FSMContext):
    data = await state.get_data()
    flight_info = await search_flights(
        origin=data['departure_city'],
        destination=data['arrival_city'],
        departure_at=data['departure_date'],
        return_at=data.get('return_date')
    )
    if flight_info:
        await message.answer(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã:\n{flight_info}", parse_mode="HTML")
    else:
        await message.answer("‚ö† –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
    await store_search_history(message.from_user.id, data)
    await state.clear()
