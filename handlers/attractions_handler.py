import aiohttp
import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from config import FOURSQUARE_API_KEY  # –í config

router = Router()
FOURSQUARE_URL = "https://api.foursquare.com/v3/places/search"

async def get_attractions_for_city(city: str, query: str = "attractions", limit: int = 5) -> str:
    headers = {
        "Accept": "application/json",
        "Authorization": FOURSQUARE_API_KEY
    }
    params = {
        "query": query,
        "near": city,
        "limit": limit
    }
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(FOURSQUARE_URL, headers=headers, params=params) as response:
                response.raise_for_status()
                data = await response.json()
                places = data.get("results", [])
                if not places:
                    return f"‚ùå –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ¬´{query}¬ª –≤ {city.title()}."
                result = f"üèõ <b>–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ {city.title()} (–∑–∞–ø—Ä–æ—Å: {query}):</b>\n\n"
                for place in places:
                    name = place.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    location = place.get("location", {})
                    address = location.get("formatted_address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
                    result += f"‚Ä¢ <b>{name}</b>\n   {address}\n\n"
                return result
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è {city}: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö."

@router.message(StateFilter("attractions:waiting_for_city"), lambda message: bool(message.text and message.text.strip()))
async def attractions_command(message: types.Message, state: FSMContext):
    # –†–∞—Å—à–∏—Ä—è–µ–º –≤–≤–æ–¥: —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    parts = [part.strip() for part in message.text.split(",")]
    city = parts[0]
    query = parts[1] if len(parts) >= 2 and parts[1] else "attractions"
    try:
        limit = int(parts[2]) if len(parts) >= 3 and parts[2].isdigit() else 5
    except Exception:
        limit = 5

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city} —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query} –∏ –ª–∏–º–∏—Ç–æ–º: {limit}")
    attractions_info = await get_attractions_for_city(city, query, limit)
    await message.answer(attractions_info, parse_mode="HTML")
    await state.clear()

@router.message(Command("attractions"))
async def attractions_command_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö.\n\n"
        "–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n"
        "‚Ä¢ <b>–≥–æ—Ä–æ–¥</b>\n"
        "‚Ä¢ –∏–ª–∏ <b>–≥–æ—Ä–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>\n"
        "‚Ä¢ –∏–ª–∏ <b>–≥–æ—Ä–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ª–∏–º–∏—Ç</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ—Å–∫–≤–∞, –º—É–∑–µ–∏, 10</i>",
        parse_mode="HTML"
    )
    await state.set_state("attractions:waiting_for_city")
