from datetime import datetime
from aiogram import Router, types
from aiogram.filters import Command
from services.db import get_search_history
from keyboards.main_keyboard import main_keyboard

router = Router()


@router.message(Command("history"))
async def history_handler(message: types.Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat.id, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á—É
    history_records = await get_search_history(message.chat.id)

    if not history_records:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.", reply_markup=main_keyboard)
        return

    response_lines = ["<b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>"]
    for idx, record in enumerate(history_records, start=1):
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ record —Å–æ–¥–µ—Ä–∂–∏—Ç: departure, arrival, departure_date, return_date, search_time
        departure, arrival, departure_date, return_date, search_time = record

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ datetime
        if isinstance(search_time, datetime):
            search_time_str = search_time.strftime("%Y-%m-%d %H:%M:%S")
        else:
            search_time_str = str(search_time)

        line = f"{idx}. ‚úà {departure} ‚Üí {arrival} | {departure_date}"
        if return_date:
            line += f" ‚Üí {return_date}"
        line += f"\n    üìÖ –ó–∞–ø—Ä–æ—Å: {search_time_str}"
        response_lines.append(line)

    response_text = "\n\n".join(response_lines)
    await message.answer(response_text, parse_mode="HTML", reply_markup=main_keyboard)
