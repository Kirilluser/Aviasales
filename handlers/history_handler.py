from aiogram import Router, types
from aiogram.filters import Command
from services.db import get_search_history
from services.db import store_search_history

router = Router()

@router.message(Command("history"))
@router.callback_query(lambda c: c.data == "history")
async def history_handler(event: types.Message | types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback_query –æ–±–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç from_user)
    user_id = event.from_user.id
    from services.db import get_search_history  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    history = await get_search_history(user_id)

    if not history:
        text = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞."
    else:
        text = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n\n"
        for record in history:
            departure, arrival, departure_date, return_date, search_time = record
            return_date_text = f" ‚ûù {return_date}" if return_date else ""
            text += f"‚úà {departure} ‚ûù {arrival} ({departure_date}{return_date_text})\nüìÖ {search_time}\n\n"

    if isinstance(event, types.Message):
        await event.answer(text)
    else:
        await event.message.edit_text(text)

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è from_user)
@router.message(Command("search"))
async def search_handler(message: types.Message):
    # –ó–¥–µ—Å—å data ‚Äì –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
    data = {
        "departure": "Moscow",
        "arrival": "London",
        "depart_date": "2025-03-10",
        "return_date": "2025-03-20"
    }
    await store_search_history(message.from_user, data)
    await message.answer("–ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ inline-–∫–Ω–æ–ø–∫—É, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è event.from_user
@router.callback_query(lambda c: c.data == "search_history")
async def callback_search_history_handler(callback: types.CallbackQuery):
    data = {
        "departure": "Moscow",
        "arrival": "London",
        "depart_date": "2025-03-10",
        "return_date": "2025-03-20"
    }
    await store_search_history(callback.from_user, data)
    await callback.answer("–ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

