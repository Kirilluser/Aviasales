from datetime import datetime
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.main_keyboard import main_keyboard
from services.db import get_search_history, clear_search_history
import logging

router = Router()

async def build_history_text(chat_id: int) -> str:
    history_records = await get_search_history(chat_id)
    if not history_records:
        return "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞."
    response_lines = ["<b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>"]
    for idx, record in enumerate(history_records, start=1):
        # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ record —Å–æ–¥–µ—Ä–∂–∏—Ç: departure, arrival, departure_date, return_date, search_time
        departure, arrival, departure_date, return_date, search_time = record
        if isinstance(search_time, datetime):
            search_time_str = search_time.strftime("%Y-%m-%d %H:%M:%S")
        else:
            search_time_str = str(search_time)
        line = f"{idx}. ‚úà {departure} ‚Üí {arrival} | {departure_date}"
        if return_date:
            line += f" ‚Üí {return_date}"
        line += f"\n   üìÖ –ó–∞–ø—Ä–æ—Å: {search_time_str}"
        response_lines.append(line)
    return "\n\n".join(response_lines)

@router.message(lambda message: message.text == "üìÉ –ò—Å—Ç–æ—Ä–∏—è")
async def navigation_history_handler(message: types.Message):
    text = await build_history_text(message.chat.id)
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="history")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")]
    ])
    await message.answer(text, parse_mode="HTML", reply_markup=inline_kb)

@router.callback_query(lambda c: c.data == "history")
async def history_callback_handler(callback: types.CallbackQuery):
    text = await build_history_text(callback.message.chat.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å (–ª–∏–±–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—É—é)
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="history")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")]
    ])
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=inline_kb)
    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

@router.callback_query(lambda c: c.data == "clear_history")
async def clear_history_handler(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    logging.info("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞: %s", chat_id)
    await clear_search_history(chat_id)
    logging.info("–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–∞ %s –æ—á–∏—â–µ–Ω–∞", chat_id)
    await callback.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=None)
    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)

