import logging
from datetime import datetime
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from services.aviasales import get_hot_deals
from utils.get_city_iata_code import get_city_iata_code

router = Router()

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hotdeals
@router.message(Command("hotdeals"))
async def hot_deals_handler(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–ü–æ —á–∏—Å–ª—É", callback_data="hotdeals:by_date"),
            types.InlineKeyboardButton(text="–ü–æ –≥–æ—Ä–æ–¥—É", callback_data="hotdeals:by_city")
        ]
    ])
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:", reply_markup=keyboard)

# ===== –ü–æ—Ç–æ–∫ "–ü–æ —á–∏—Å–ª—É" (–≤—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å) =====
@router.callback_query(lambda c: c.data == "hotdeals:by_date")
async def hot_deals_by_date(callback: types.CallbackQuery, state: FSMContext):
    from utils.calendar import generate_calendar
    today = datetime.today()
    calendar_markup = generate_calendar(today.year, today.month)
    await state.clear()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞:", reply_markup=calendar_markup)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("CALENDAR:"), StateFilter(None))
async def process_date_callback(callback: types.CallbackQuery, state: FSMContext):
    selected_date = callback.data.split(":", 1)[1]  # —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É)
        deals = await get_hot_deals()
        logging.info(f"–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç API: {deals}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ–π –¥–∞—Ç–µ
        filtered_deals = [d for d in deals if d.get("depart_date") == selected_date]

        # –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –¥–∞—Ç–µ
        if not filtered_deals:
            try:
                sorted_deals = sorted(
                    deals,
                    key=lambda d: (
                        abs((datetime.strptime(d["depart_date"], "%Y-%m-%d") - datetime.strptime(selected_date, "%Y-%m-%d")).days),
                        d.get("value", float('inf'))
                    )
                )
                filtered_deals = sorted_deals[:5]  # –±–µ—Ä–µ–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            except Exception as ex:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –¥–∞—Ç–µ: {ex}")
                filtered_deals = []

        logging.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {filtered_deals}")

        if not filtered_deals:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
            await callback.answer()
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ü–µ–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ "value")
        sorted_deals = sorted(filtered_deals, key=lambda d: d.get("value", float('inf')))
        response = f"üî• <b>–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ {selected_date}:</b>\n\n"
        for deal in sorted_deals[:5]:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º gate –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, value –∫–∞–∫ —Ü–µ–Ω—É
            operator = deal.get("gate", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper()
            price = deal.get("value", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            depart_date = deal.get("depart_date", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            origin = deal.get("origin", "??")
            destination = deal.get("destination", "??")
            response += (
                f"‚úà <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {operator}\n"
                f"üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {origin} ‚Üí {destination}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:</b> {depart_date}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} USD\n"
                f"üîó <a href='https://www.aviasales.com/search/{origin}{destination}{depart_date.replace('-', '')}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ</a>\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )
        await callback.message.answer(response, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

# ===== –ü–æ—Ç–æ–∫ "–ü–æ –≥–æ—Ä–æ–¥—É" =====
@router.callback_query(lambda c: c.data == "hotdeals:by_city")
async def hot_deals_by_city(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")
    await state.set_state("hotdeals:by_city")
    await callback.answer()

@router.message(StateFilter("hotdeals:by_city"))
async def process_hot_deals_by_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    iata_code = get_city_iata_code(city)
    if not iata_code:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IATA-–∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(city=iata_code)
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=str(n), callback_data=f"hotdeals:city:number:{n}") for n in range(1, 6)]
    ])
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å (–æ—Ç 1 –¥–æ 5)?", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("hotdeals:city:number:"), StateFilter("hotdeals:by_city"))
async def process_hot_deals_city_number(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    count = int(parts[3])
    data = await state.get_data()
    city_code = data.get("city")
    if not city_code:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    try:
        deals = await get_hot_deals(origin=city_code)
        logging.info(f"–ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {city_code}: {deals}")
        if not deals:
            await callback.message.answer("‚ùå –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
            await callback.answer()
            return
        sorted_deals = sorted(deals, key=lambda d: d.get("value", float('inf')))
        selected_deals = sorted_deals[:count]
        response = f"üî• <b>–ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {city_code}:</b>\n\n"
        for deal in selected_deals:
            operator = deal.get("gate", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper()
            price = deal.get("value", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            depart_date = deal.get("depart_date", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            origin = deal.get("origin", city_code)
            destination = deal.get("destination", "??")
            response += (
                f"‚úà <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {operator}\n"
                f"üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {origin} ‚Üí {destination}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:</b> {depart_date}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} USD\n"
                f"üîó <a href='https://www.aviasales.com/search/{origin}{destination}{depart_date.replace('-', '')}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ</a>\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            )
        await callback.message.answer(response, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()
    await callback.answer()
